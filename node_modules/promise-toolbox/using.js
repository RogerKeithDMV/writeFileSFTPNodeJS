"use strict";

var Disposable = require("./Disposable");

var evalDisposable = require("./_evalDisposable");

var ExitStack = require("./_ExitStack");

var pFinally = require("./_finally");

var wrapApply = require("./wrapApply");

var wrapCall = require("./wrapCall");

var onHandlerFulfill = function onHandlerFulfill(result) {
  if (result == null || typeof result.next !== "function") {
    return result;
  }

  var _ExitStack = new ExitStack(),
      dispose = _ExitStack.dispose,
      stack = _ExitStack.value;

  var onEvalDisposable = function onEvalDisposable(disposable) {
    return loop(stack.enter(disposable));
  };

  var onFulfill = function onFulfill(cursor) {
    return cursor.done ? cursor.value : evalDisposable(cursor.value).then(onEvalDisposable);
  };

  var loop = function loop(value) {
    return wrapCall(result.next, value, result).then(onFulfill);
  };

  return pFinally(loop(), dispose);
};

module.exports = function using() {
  var _this = this;

  var nDisposables = arguments.length - 1;

  if (nDisposables < 0) {
    throw new TypeError("using expects at least 1 arguments");
  }

  var handler = arguments[nDisposables];
  var disposables;
  var spread = nDisposables > 1 || !Array.isArray(disposables = arguments[0]);

  if (spread) {
    disposables = Array.prototype.slice.call(arguments, 0, nDisposables);
  } else {
    nDisposables = disposables.length;
  }

  return Disposable.all(disposables).then(function (_ref) {
    var dispose = _ref.dispose,
        value = _ref.value;
    return pFinally((spread ? wrapApply : wrapCall)(handler, value, _this).then(onHandlerFulfill), dispose);
  });
};